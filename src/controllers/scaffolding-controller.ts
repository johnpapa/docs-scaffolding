import { commands, Uri, window, QuickPickItem } from "vscode";
import { join } from "path";
import { cleanupDownloadFiles } from "../helper/cleanup";
import {
  docsAuthoringDirectory,
  postWarning,
  showStatusMessage,
} from "../helper/common";
import { templateFolder } from "../extension";
import { renameModuleReferences } from "../helper/module";
import { incrementUnitNumber } from "../helper/unit";
import { readFileSync } from "fs";

export async function scaffoldModule(uri: Uri) {
  // clean up template directory and download copy of the template repo.
  cleanupDownloadFiles(true).then(() => downloadRepo());
  // getSelectedFolder(uri);
}

export function moveSelectionUp() {
  commands.executeCommand("editor.action.moveLinesUpAction");
}

export function moveSelectionDown() {
  commands.executeCommand("editor.action.moveLinesDownAction");
  incrementUnitNumber();
}

// download a copy of the template repo to the "docs authoring" directory.  no .git-related files will be generated by this process.
export async function downloadRepo() {
  const download = require("download-git-repo");
  const templateRepo = "MicrosoftDocs/content-templates";
  download(templateRepo, docsAuthoringDirectory, (err: any) => {
    if (err) {
      postWarning(err ? `Error: Cannot connect to ${templateRepo}` : "Success");
      showStatusMessage(
        err ? `Error: Cannot connect to ${templateRepo}` : "Success"
      );
    } else {
      // displayTemplates().then(() => logRepoData());
    }
  });
}

export async function moduleSelectionQuickPick(uri: Uri) {
  const fs = require("fs");
  const directoryPath = join(
    docsAuthoringDirectory,
    "learn-scaffolding-main",
    "module-type-definitions"
  );
  let moduleTypes: QuickPickItem[] = [];
  fs.readdir(directoryPath, function (err: string, files: any[]) {
    //handling error
    if (err) {
      return console.log("Unable to scan directory: " + err);
    }
    //listing all files using forEach
    files.forEach(function (file) {
      let jsonPath = join(directoryPath, file);
      const moduleJson = readFileSync(jsonPath, "utf8");
      let data = JSON.parse(moduleJson);
      moduleTypes.push(data.moduleType);
    });
    return showModuleSelector(uri, moduleTypes);
  });
}

export async function showModuleSelector(uri: Uri, moduleTypes: any[]) {
  const selection = await window.showQuickPick(moduleTypes);
  await getSelectedFolder(uri, selection);
}

export function getSelectedFolder(uri: Uri, moduleType: string) {
  const fse = require("fs-extra");
  const directoryPath = join(docsAuthoringDirectory, "learn-scaffolding-main");
  const selectedFolder = uri.fsPath;
  const getUserInput = window.showInputBox({
    prompt: "Enter module name.",
    validateInput: (userInput) =>
      userInput.length > 0 ? "" : "Please provide a module name.",
  });
  getUserInput.then((moduleName) => {
    if (!moduleName) {
      return;
    }
    moduleName = moduleName.replace(/ /g, "-");
    // module path and media placeholder
    const scaffoldModule = join(selectedFolder, moduleName);
    const mediaPlaceholder = join(directoryPath, "media", "placeholder.png");

    // module index
    const moduleYML = join(directoryPath, "content-templates", "default-index.yml");

    // units
    const introductionMarkdown = join(directoryPath, "content-templates", "default-introduction-unit.md");
    const learningContentYML = join(directoryPath, "content-templates", "default-unit.yml");
    const knowledgeCheckStandaloneYML = join(directoryPath, "content-templates", "default-knowledge-check-standalone-unit.yml");
    const exerciseYML = join(directoryPath, "content-templates", "default-unit.yml");

    // includes
    const learningContentMarkdown = join(directoryPath, "content-templates", "default-learning-content-unit.md");
    const exerciseMarkdown = join(directoryPath, "content-templates", "default-exercise-unit.md");

    switch (moduleType) {
      case "choose":
        fse.copySync(moduleYML, join(scaffoldModule, "index.yml"));
        fse.copySync(mediaPlaceholder, join(scaffoldModule, "media", "placeholder.png"));

        fse.copySync(learningContentYML, join(scaffoldModule, "1-introduction.yml"));
        fse.copySync(introductionMarkdown, join(scaffoldModule, "includes", "1-introduction.md"));

        fse.copySync(learningContentYML, join(scaffoldModule, `2-identify-${moduleName}-options.yml`));
        fse.copySync(learningContentMarkdown, join(scaffoldModule, "includes", `2-identify-${moduleName}-options.md`));

        fse.copySync(learningContentYML, join(scaffoldModule, "3-analyze-decision-criteria.yml"));
        fse.copySync(learningContentMarkdown, join(scaffoldModule, "includes", "3-analyze-decision-criteria.md"));

        fse.copySync(learningContentYML, join(scaffoldModule, "4-use-{product1}.yml"));
        fse.copySync(learningContentMarkdown, join(scaffoldModule, "includes", "4-use-{product1}.md"));

        fse.copySync(learningContentYML, join(scaffoldModule, "5-use-{product2}.yml"));
        fse.copySync(learningContentMarkdown, join(scaffoldModule, "includes", "5-use-{product2}.md"));

        fse.copySync(learningContentYML, join(scaffoldModule, "6-use-{product3}.yml"));
        fse.copySync(learningContentMarkdown, join(scaffoldModule, "includes", "6-use-{product3}.md"));

        fse.copySync(learningContentYML, join(scaffoldModule, "7-use-{product4}.yml"));
        fse.copySync(learningContentMarkdown, join(scaffoldModule, "includes", "7-use-{product4}.md"));

        fse.copySync(knowledgeCheckStandaloneYML, join(scaffoldModule, "8-knowledge-check.yml"));

        fse.copySync(learningContentYML, join(scaffoldModule, "9-summary.yml"));
        fse.copySync(learningContentMarkdown, join(scaffoldModule, "includes", "9-summary.md"));
        break;
      case "introduction":
        fse.copySync(moduleYML, join(scaffoldModule, "index.yml"));
        fse.copySync(mediaPlaceholder, join(scaffoldModule, "media", "placeholder.png"));

        fse.copySync(learningContentYML, join(scaffoldModule, "1-introduction.yml"));
        fse.copySync(introductionMarkdown, join(scaffoldModule, "includes", "1-introduction.md"));

        fse.copySync(learningContentYML, join(scaffoldModule, `2-what-is-${moduleName}.yml`));
        fse.copySync(learningContentMarkdown, join(scaffoldModule, "includes", `2-what-is-${moduleName}.md`));

        fse.copySync(learningContentYML, join(scaffoldModule, `3-how-${moduleName}-works.yml`));
        fse.copySync(learningContentMarkdown, join(scaffoldModule, "includes", `3-how-${moduleName}-works.md`));

        fse.copySync(learningContentYML, join(scaffoldModule, `4-when-to-use-${moduleName}.yml`));
        fse.copySync(learningContentMarkdown, join(scaffoldModule, "includes", `4-when-to-use-${moduleName}.md`));

        fse.copySync(knowledgeCheckStandaloneYML, join(scaffoldModule, "5-knowledge-check.yml"));

        fse.copySync(learningContentYML, join(scaffoldModule, "6-summary.yml"));
        fse.copySync(learningContentMarkdown, join(scaffoldModule, "includes", "6-summary.md"));
        break;
      case "standard":
        fse.copySync(moduleYML, join(scaffoldModule, "index.yml"));
        fse.copySync(mediaPlaceholder, join(scaffoldModule, "media", "placeholder.png"));

        fse.copySync(learningContentYML, join(scaffoldModule, "1-introduction.yml"));
        fse.copySync(introductionMarkdown, join(scaffoldModule, "includes", "1-introduction.md"));

        fse.copySync(learningContentYML, join(scaffoldModule, "2-learning-content.yml"));
        fse.copySync(learningContentMarkdown, join(scaffoldModule, "includes", "2-learning-content.md"));

        fse.copySync(exerciseYML, join(scaffoldModule, "3-exercise.yml"));
        fse.copySync(exerciseMarkdown, join(scaffoldModule, "includes", "3-exercise.md"));

        fse.copySync(knowledgeCheckStandaloneYML, join(scaffoldModule, "5-knowledge-check.yml"));

        fse.copySync(learningContentYML, join(scaffoldModule, "5-summary.yml"));
        fse.copySync(learningContentMarkdown, join(scaffoldModule, "includes", "5-summary.md"));
        break;
    }
  });
}
