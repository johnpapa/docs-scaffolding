import { commands, Uri, window } from "vscode";
import { join } from "path";
import { cleanupDownloadFiles } from "../helper/cleanup";
import {
  docsAuthoringDirectory,
  postWarning,
  showStatusMessage,
} from "../helper/common";
import { templateFolder } from "../extension";
import { renameModuleReferences } from "../helper/module";
import { incrementUnitNumber } from "../helper/unit";


export async function scaffoldModule(uri: Uri) {
  // clean up template directory and download copy of the template repo.
  cleanupDownloadFiles(true).then(() => downloadRepo());
  getSelectedFolder(uri);
}

export function moveSelectionUp() {
  commands.executeCommand("editor.action.moveLinesUpAction");
}

export function moveSelectionDown() {
  commands.executeCommand("editor.action.moveLinesDownAction");
  incrementUnitNumber();
}

// download a copy of the template repo to the "docs authoring" directory.  no .git-related files will be generated by this process.
export async function downloadRepo() {
  const download = require("download-git-repo");
  const templateRepo = "MicrosoftDocs/content-templates";
  download(templateRepo, docsAuthoringDirectory, (err: any) => {
    if (err) {
      postWarning(err ? `Error: Cannot connect to ${templateRepo}` : "Success");
      showStatusMessage(
        err ? `Error: Cannot connect to ${templateRepo}` : "Success"
      );
    } else {
      // displayTemplates().then(() => logRepoData());
    }
  });
}

export function getSelectedFolder(uri: Uri) {
  const fse = require("fs-extra");
  const selectedFolder = uri.fsPath;
  const getUserInput = window.showInputBox({
    prompt: "Enter module name.",
    validateInput: (userInput) =>
      userInput.length > 0 ? "" : "Please provide a module name.",
  });
  getUserInput.then((moduleName) => {
    if (!moduleName) {
      return;
    }
    moduleName = moduleName.replace(/ /g, "-");
    const scaffoldModule = join(selectedFolder, moduleName);
    fse.copy(templateFolder, scaffoldModule, (err: any) => {
      if (err) {
        return console.error(err);
      }
      renameModuleReferences(scaffoldModule, moduleName);
    });
  });
}
